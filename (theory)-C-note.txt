                                Lec-2
                                -----

#include<stdio.h>
int  main(void){
	printf("welcome");
	retunr 0;
}



---------------------------------------------------------------------------------------------------------
#include 			= 	directive																		|
---------------------------------------------------------------------------------------------------------
stdio.h 			= 	input-output header file 														|
---------------------------------------------------------------------------------------------------------
'int' main() 		= 	this is the return type															|
---------------------------------------------------------------------------------------------------------
int 'main'() 		= 	funciton name 																	|
---------------------------------------------------------------------------------------------------------
int main('void')	= 	parameter																		|
---------------------------------------------------------------------------------------------------------
printf				= 	built in 'library function' ( linkers connect this to the header file )			|
---------------------------------------------------------------------------------------------------------
retrun 0  			= 	return of the function															|
---------------------------------------------------------------------------------------------------------
if end is ';' 		= 	this ';' at end means that the line is a statement (#include is not a statement)|
---------------------------------------------------------------------------------------------------------



# C was invented in 1972 By Dennis ritchi

# C is a 'case sensetive' programmeing language (uppercase, lowercase)

# Languages are of 3 types:
	1. High lvl lang : 
			COBOL,FORTRAN,Basic
			made for specific work
			used in business(COBOL) and math(FORTRAN)

	2.Mid lvl lang :
			C,C++,JAVA

	3.Low lvl lang : 
			Assemble
			requires LARGE code for short work

# The compiler converts the code to 0's and 1's

# The compiler finds the MAIN function and runs that first

# Function is a set of statements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-3
                                    -----

# variable = memory address/location/container
# int x;
    int = data type
    x = variable name
# Alpha-numeric = Alphabate and numbers
# "-" is not allowed in variable name
# variable name cannot start with a number

#if we give  as input 
	the computer writes : 00000000 00000101

# integer stores a 16 bit data.

#include<stdio.h>
int main(){
	int a=15;b=15;
	int sum;
	sum = a+b;



}


# "%d" is a formate specifier .

# Datatype:
	# character (char) Memory Size : 1B | Format spe: %c
	# integer (int) Memory Size : 2B/4B/8B | Format spe: %d
	# floatint point number (float) Memory Size : 4B | Format Spec: %f
	# double precision floating point number (double) : 8B | Format Spec: %lf
	# void

Variable:
	# Local - variable declared inside a function are called L_Var
	# global - variable declared outside a function are called G_Var


# &x -> the location of the x variable;

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-4
                                    -----

# Arithmetic operator:
    +,-,*,/,%
# modulus always works on intger value. Because it always returns an integer 
# Unary operator: "-" Example: a = 5; -a = -5; It is possible to be used in one variable or one operand
# a = a+b; can be writen as a += b
# User defined Function:
  Structure:
    (return type) (function name) (parameter) {
        logic;
        return ;
    }
  Example:
    int add(int a,int b){
        return a+b;
    }
# The parameter variables function as local variable inside the declared function
# add(5,2) : here 5 and 2 are arguments of the function
# if we put the user made function under the main function, we need to do protoyping .
    prototyping :
      #include<stdio.h>
      int add(int a,int b);

      int main(){
          ......
      }



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-5
                                    -----


# if (conditional expression/condition) {
    statement;  
  }

# Even or Odd :
    int main(){
    
    	int a;
    	scanf("%d",&a);
    	if(a%2 == 0){
    		printf("This number is an even number\n");
    	}
    	else{
    		printf("This number is an odd number \n");
    	}
    	return 0 ;
    }

# a%2 == 1 : this is an "odd" number


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-6
                                    -----
# If there are multiple (more thatn 2) conditions to check , we use if,else if,else 
# if we use else if , then it is not mandatory to add else{} . But the convention is that we add the else{} at the end.
# >,<,==,>=,<=,!= : these are called relational operator
# &&, ||, ! : these are logical operator
# if(a){...} this is similar to if(a!=0){...}


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-7
                                    -----


# (y%400 == 0 for 1800,1900,2000) || (y%4 == 0 && y%100 != 0 for the remaining years)
# 
# Largest among a,b,c [using nasted if]
	
	#include<stdio.h>
	int main(){
			
		int a=10,b=8,c=12;
		int max;
		if(a>b){
			if(a>c){
				max = a;
			}
			else{
				max = c;
			}
		}
		else if(b>c){
			max = b;
		}
		else{
			max = c;
		}
		
		printf("%d",max);
	
		return 0;
		
	}
	
	
	
	
	
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-8
                                    -----

# switch-case:
        switch(expression){
             case constant 1:
                   .....
                   break;
              case constant 2:
                   .....
                   break;
              default:
            ......
         }

    Example:
    --------
       char grade;
       scanf(" %c",&grade);
       switch(grade){
             case 'A':
                   .....
                   break;
              case 'B':
                   .....
                   break;
              default:
                   ......
         }
# This thing prints 'Got it' if input is between 1-3: 
       switch(number){
             case 1:
                   .....
              case 2:
                   .....
              case 3:
                  printf("Got it");
                  break;
              default:
                   ......
         }

# for loop:
       for (initialization;condition;iteration){
             .....
       }

       Example:
       --------
       for(int i=1;i<=10;i++){
           printf("%d",&i);
        }



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-9
                                    -----


for(int i=0;i<=5;i++){
	for(int j=0;j<=3;j++){
		printf("%d",j);
	}
	printf("\n");
}
# There are 2 loops above, outer for-loop, inner for-loop
	# This prints:
		123
		123
		123
		123
		123

# Prime number from 2-10:
	for(int i=2;i<=10;i++){
		int is_prime = 1;
		for(int j=2;j<i;j++){
			if(i%j == 0){
				is_prime = 0;
				break;
			}
		}
		(is_prime == 1)? printf("%d ",i) : printf("");
	}


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-10
                                    -----

# while(condition){
	.....
 }
 Application: 
	 int i=0;
	 while(i<10){
		printf("%d\n",i);
		i++;
	 }

# Guessing game : 
	  int n,flag = 0;
	  printf("Enter 5+7:");
	  while(flag == 0){
		scanf("%d",&n);
		if(n==12) flag = 1;
		else printf("Try again :");
	  }
	  printf("Success");

# Infinite loop :
	while(1){
		printf("infinitel lopp");
	}
	for( ; ; ){
		printf("infinite loop");
	}

# guessing game without break:
	int n,flag = 0,try = 3;
	printf("Enter 5+7= ");
	while(flag == 0 && try>0){
		scanf("%d",&n);
		if(n == 12) flag = 1;
		else{
			printf("Try again: ");
			try --;
		}
	}
	

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-11
                                    ------
# Getting the digit from an integer:
	int number = 123;
	int last_digit = number%10 // this is the last digit [i.e 3]
	int first_two_digits = number/10 // this is the first 2 digit number [i.e 12]

	code :
	-----	
	int number = 123;
	int sum = 0;
	while(number != 0){
		int remainder = number%10;
		sum += remainder;
		number /= 10;
	}
	printf("The summation is : %d",sum);

# do-while :
	do{
		...
	}while(condition);
	Application :
	-----------
	int number = 1;
	do{
		number += 1;
	}while(number<5);

# do-while runs atleast ones even if the condition is not true. But other loops might not run if the condition is not true.
# while(...); inside the '()' we cannot initialize a new variable. Because here we write a condition.

# guessing game :
	printf("Enter 5+7 : ");
	do{
		int n;
		scanf("%d", &n);
		if(n == 12) break;
		else printf("Wrong answer. Enter again : ");
	}while(1);
	printf("Great");

# differe between i++ and ++i;
	int i = 10;
	int a = i++;
	// Now i = 11 and a = 10

	int i = 10;
	int a = ++i;
	// Now i = 11 and a = 11


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-15
                                    ------

# Array
    Definition: An array is a collection of elements of the same data type stored in a contigious memory location.
	int mark; // normal variable
	int marks[5]; // collection of 5 normal variables
	"int" = data type
	"mark" = array name
	"5" = number of items

	memory address : 0x1100,0x1103,0x1106,0x1109,0x11C - serial wise allocation
	
	marks[0] -- 1000-1003 bytes
	marks[1] -- 1004-1007 bytes
	marks[2] -- 1008-1011 bytes
	marks[3] -- 1012-1015 bytes
	marks[4] -- 1016-1019 bytes

# General syntax :
	data_type array_name[size];
# Application :
	int marks[5];
# Indexing :
	the 1st element of the array is in the 0th index. 

	element		index
	  1st		  0
	  2nd		  1
	  3rd		  2
	  4th		  3
	  5th		  4

# Value initialization : 
	# 1 : int marks[5] = {1,2,3,4,5};
	# 2 : 
		int marks[5];
		marks[0] = 1;  // 1st mark
		marks[1] = 2;  // 2nd mark
		marks[2] = 3;  // 3rd mark
		marks[3] = 4;  // 4th mark
		marks[4] = 5;  // 5th mark
	# 3 :
		int marks[5] = {}; // mark = {0,0,0,0,0}
	# 4 :
		int marks[] = {1,2,3}; // make an array of size 3
		
		


# Printing individual array value : 
	int marks[5] = {1,2,3,4,5};
	printf("%d", mark[1]); // prints 2. This is the 2nd item of the array
	printf("%d, %d", mark[0],mark[1]); // prints 1, 2. 

# Printing all the values of array:
	int marks[5] = {1,2,3,4,5};

	for(int i=0;i<5;i++){
		printf("%d", mark[i]);
	}

# Summation of all the values : 
	int marks[5] = {1,2,3,4,5};
	int sum = 0;
	for(int i=0;i<5;i++){
		sum += marks[i];
	}

	printf("%d",sum);

# XOR operator : ^


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-16
                                    ------

# Finding the maximum value of an array:
	int arr[5] = {5,4,3,2,1};
	int max = arr[0];
	for(int i=0;i<5;i++){
		if(arr[i]>max){
			max = arr[i];
		}
	}
	printf("%d",max);

# Getting values from user as input : 
	int arr[5];
	printf("Enter the array values : ");
	for(int i=0;i<5;i++){
		scanf(%d".&arr[i]);
	}

# Sorting (Bubble sort) :
	int arr[5] = {5,4,3,2,1};
	for(int i=0;i<5;i++){
		for(int j=0;j<4-i;j++){
			if(arr[j]>arr[j+1]){
				int temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
	}

# Simulation of the Buble sort :
	i = 0;
		j = 0; 5,4,3,2,1 -> 4,5,3,2,1
		j = 1; 4,5,3,2,1 -> 4,3,5,2,1
		j = 2; 4,3,5,2,1 -> 4,3,2,5,1
		j = 3; 4,3,2,5,1 -> 4,3,2,1,5
	
	i = 1;
		j = 0; 4,3,2,1,5 -> 3,4,2,1,5
		j = 1; 3,4,2,1,5 -> 3,2,4,1,5
		j = 2; 3,2,4,1,5 -> 3,2,1,4,5
	i = 2;
		j = 0; 3,2,1,4,5 -> 2,3,1,4,5
		j = 1; 2,3,1,4,5 -> 2,1,3,4,5
	i = 3;
		j = 0; 2,1,3,4,5 -> 1,2,3,4,5



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-17
                                    ------


# 2D array:
    int marks[3][5];
              ^  ^
              |  |
             row colum

# indexing : 
    0 1 2 3 4
    - - - - -
 0 | | | | | |
    - - - - -
 1 | | |5| | |
    - - - - -
 2 | | | | | |

 the element '5' is in (1,2) index
 
# Initialization :
    int marks[3][5] = {
        {1,2,3,4,5},
        {6,7,8,9,10},
        {11,12,12,14,15}
    };

# Traverse :
    int marks[3][5] = {
        {1,2,3,4,5},
        {6,7,8,9,10},
        {11,12,12,14,15}
    };

    for(int row=0;row<3;row++){
        for(int col=0;col<5;col++){
            printf("%d ",marks[row][col]);
        }
        printf("\n");
    }

# sum of each row :
    int marks[3][5] = {
        {1,2,3,4,5},
        {6,7,8,9,10},
        {11,12,13,14,15}
    };

    for(int row=0;row<3;row++){
        int sum = 0;
        for(int col=0;col<5;col++){
            sum += marks[row][col];
        }
        printf("%d\n",sum);
    }

# Maximum value of one colum :

    int marks[3][5] = {
        {1,2,3,4,5},
        {6,7,8,9,10},
        {11,12,13,14,15}
    };

    int col = 0;
    while(col<5){
        int max = marks[0][col];
        for(int row=0;row<3;row++){
            if(marks[row][col] > max){
                max = marks[row][col];
            }
        }
        printf("%d ",max);
        col++;
    }

# transpose of an array :

    int marks[3][5] = {
        {1,2,3,4,5},
        {6,7,8,9,10},
        {11,12,13,14,15}
    };

    int t[5][3];
    for(int row=0;row<3;row++){
        for(int col=0;col<5;col++){
            t[col][row] = marks[row][col];
        }
        printf("\n");
    }


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-18
                                    ------


# 3D array :
    int arr[3][4][2];
            ^  ^  ^
          row col Z

    Looks like a rubics cube 

# The upper index is the '0'th index And The 2nd layer is the '1'th index

# if we take the elements 
        arr[0][0][0]
        arr[0][0][1]
    we will get a 1D array of size 2;

# Inserting value in an array : 
    arr[2][3][4] = {
        {
            {1,2,3,4},
            {5,6,7,8},
            {9,10,11,12}
        },
        {
            {1,2,3,4},
            {1,2,3,4},
            {1,2,3,4}
        }
    };


    ------- 
   |1 |5 |9|
    ---------
   |13|17 |21|
    ---------

        -------- 
       |2 |6 |10|
        -------- 
       |14|18|22|
        --------

            -------- 
           | 3| 7|11|
            --------
           |15|19|23|
            --------
            
                ------- 
               |4| 8|12|
                -------- 
               |16|20|24|
                --------

# printing The array :

    int arr[2][3][4] = {
        {
            {1,2,3,4},
            {5,6,7,8},
            {9,10,11,12}
        },
        {
            {1,2,3,4},
            {1,2,3,4},
            {1,2,3,4}
        }
    };


    for(int i=0;i<2;i++){
        for(int j=0;j<3;j++){
            for(int k=0;k<4;k++){
                printf("%d",arr[i][j][k]);
            }
            printf("\n");
        }
        printf("\n");
    }




~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Rough
                                    ------

//
    for(int i=0;i<n;i++){
        for(int k=(n-i);k>=0;k--) printf(" ");
        for(int j=0;j<(2*i)+1;j++){
            cout << "*";
        }
        cout << endl;
    }

    cout << endl;
//
    for(int i=0;i<n;i++){
        for(int k=(n-i);k>=0;k--) printf(" ");
        for(int j=0;j<(2*i)+1;j++){
            if(i==0 || i==n-1 || j==0 || j==(2*i)) cout << "*";
            else cout << " ";
        }
        cout << endl;
    }

    cout << endl;
//
    for(int i=0;i<n;i++){
        for(int k=(n-i);k>=0;k--) printf(" ");
        for(int j=0;j<(2*i)+1;j++){
            cout << "*";
        }
        cout << endl;
    }
    for(int i=n-2;i>=0;i--){
        for(int k=0;k<=n-i;k++) printf(" ");
        for(int j=0;j<(2*i)+1;j++){
            cout << "*";
        }
        cout << endl;
    }

    cout << endl;
//
    for(int i=0;i<n;i++){
        for(int k=(n-i);k>=0;k--) printf(" ");
        for(int j=0;j<(2*i)+1;j++){
            if(j==0 || j==(2*i)) cout << "*";
            else cout << " ";
        }
        cout << endl;
    }
    for(int i=n-2;i>=0;i--){
        for(int k=0;k<=n-i;k++) printf(" ");
        for(int j=0;j<(2*i)+1;j++){
            if(j==0 || j==(2*i)) cout << "*";
            else cout << " ";
        }
        cout << endl;
    }
    
    cout << endl;
//
    for(int i=n-1;i>=0;i--){
        for(int k=0;k<=n-i;k++) printf(" ");
        for(int j=0;j<(2*i)+1;j++){
            cout << "*";
        }
        cout << endl;
    }
    for(int i=1;i<n;i++){
        for(int k=(n-i);k>=0;k--) printf(" ");
        for(int j=0;j<(2*i)+1;j++){
            cout << "*";
        }
        cout << endl;
    }
//
    cout << endl;
    for(int i=0;i<n;i++){
        for(int k=(n-i);k>=0;k--) printf(" ");
        for(int j=0;j<(2*i)+1;j++){
            if(j<=((2*i)+1)/2)cout << j+1;
            else cout <<(((2*i)+1)/2 +1) - ((j) - ((2*i)+1)/2) ;
        }
        cout << endl;
    }

    cout << endl;
//
    for(int i=0;i<n;i++){
        for(int k=(n-i);k>=0;k--) printf(" ");
        for(int j=0;j<(2*i)+1;j++){
            if(j<=((2*i)+1)/2)cout << j+1;
            else cout <<(((2*i)+1)/2 +1) - ((j) - ((2*i)+1)/2) ;
        }
        cout << endl;
    }
    for(int i=n-2;i>=0;i--){
        for(int k=0;k<=n-i;k++) printf(" ");
        for(int j=0;j<(2*i)+1;j++){
            if(j<=((2*i)+1)/2)cout << j+1;
            else cout <<(((2*i)+1)/2 +1) - ((j) - ((2*i)+1)/2) ;
        }
        cout << endl;
    }

    cout << endl;
//
    for(int i=n-1;i>=0;i--){
        for(int k=0;k<=n-i;k++) printf(" ");
        for(int j=0;j<(2*i)+1;j++){
            if(j<=((2*i)+1)/2)cout << j+1;
            else cout <<(((2*i)+1)/2 +1) - ((j) - ((2*i)+1)/2) ;
        }
        cout << endl;
    }
    for(int i=1;i<n;i++){
        for(int k=(n-i);k>=0;k--) printf(" ");
        for(int j=0;j<(2*i)+1;j++){
            if(j<=((2*i)+1)/2)cout << j+1;
            else cout <<(((2*i)+1)/2 +1) - ((j) - ((2*i)+1)/2) ;
        }
        cout << endl;
    }

int main(){

// -------------------------------------------------------------------------------------------------------------------------------------------------------
// Preliminary(10)
		// int number;
		// printf("Enter a number : ");
		// scanf("%d", &number);

		// int sum = 0;

		// while(number != 0){
		// 	int remainder = number%10;
		// 	number = number/10;
		// 	sum += remainder;
		// }

		// printf("The summation of the digis is : %d", sum);
// -------------------------------------------------------------------------------------------------------------------------------------------------------
//Preliminary(11)
//    int n;
//    printf("Enter a number : ");
//    scanf("%d",&n);
//
//    int reverse = 0;
//    while(n!=0){
//        reverse = reverse*10 + (n%10);
//        n/=10;
//    }
//    printf("Reversed number is : %d",reverse);
// -------------------------------------------------------------------------------------------------------------------------------------------------------
// Preliminary(12)
		// int number;
		// printf("Enter a number : ");
		// scanf("%d", &number);

		// int sum = number%10;

		// while(number != 0){
		// 	int remainder = number%10;
		// 	number = number/10;
		// 	if(number == 0){
		// 		sum += remainder;
		// 	}
		// }

		// printf("The summation of the digis is : %d", sum);
// -------------------------------------------------------------------------------------------------------------------------------------------------------
// Looping(3.ii)
	// int i=2;
	// int sum  = 7;
	// int current_item = 7;
	// while(i<=100){
	// 	current_item += 13;
	// 	sum+=current_item;
	// 	i++;
	// }
	// printf("The summation is : %d\n", sum);
// -------------------------------------------------------------------------------------------------------------------------------------------------------
// Looping(3.iii)
	// int current_item = 5;
	// int operation = 1; // 1 for '-' |  2 for '+'
	// int sum = 5;
	// int i = 2;
	// while(i<=75){
	// 	current_item += 6;
	// 	if(operation == 1){
	// 		sum -= current_item;
	// 		operation = 2;
	// 	}
	// 	else{
	// 		sum += current_item;
	// 		operation = 1;
	// 	}
	// 	i++;
	// }
	// printf("The result is : %d\n", sum);
// -------------------------------------------------------------------------------------------------------------------------------------------------------
// Looping(3.iv)
	// int i = 1;
	// int sum = 0;
	// int n;
	// printf("Enter a number : ");
	// scanf("%d",&n);
	// while(i<=n){
	// 	int sub_sum = 0;
	// 	for(int j=1;j<=i;j++){
	// 		sub_sum += j;
	// 	}
	// 	sum += sub_sum;
	// 	i+=1;
	// }
	// printf("The summation is : %d", sum);
// -------------------------------------------------------------------------------------------------------------------------------------------------------
// Looping(4)
	// int a,b;
	// printf("Enter the range of the numbers : ");
	// scanf(" %d %d", &a,&b);
	// for(int i=a;i<=b;i++){
	// 	int is_prime = 0; // 0 = true | 1 = false
	// 	for(int j=i-1;j>=2;j--){
	// 		if(i%j == 0){
	// 			is_prime = 1;
	// 		}
	// 	}
	// 	if(is_prime == 0){
	// 		printf("%d ", i);
	// 	}
	// }
// -------------------------------------------------------------------------------------------------------------------------------------------------------
// Looping(6)
	// int n;
	// printf("Enter the value of n : ");
	// scanf("%d",&n);

	// int iter = 1;
	// while(iter <= n){
	// 	for(int i=2;iter<=n;i++){
	// 		int sum = 0;
	// 		for(int j=i-1;j>0;j--){
	// 			if(i%j == 0){
	// 				sum += j;
	// 			}
	// 		}
	// 		if(sum == i){
	// 			printf("%d ",i);
	// 			iter ++;
	// 		}
	// 	}

	// }
// -------------------------------------------------------------------------------------------------------------------------------------------------------
// Looping(7)
	// int n;
	// printf("Enter a number : ");
	// scanf("%d",&n);

	// int first_number = 1;
	// int second_number = 1;
	// if(n == 1){
	// 	printf("%d",first_number);
	// }
	// else if(n == 2){
	// 	printf("%d %d ",first_number,second_number);
	// }
	// else{
	// 	printf("%d %d ",first_number,second_number);
	// 	int iter = 2;
	// 	while(iter < n){

	// 		int new_number = first_number+second_number;
	// 		printf("%d ",new_number);
	// 		iter++;
	// 		first_number = second_number;
	// 		second_number = new_number;
	// 	}
	// }
// -------------------------------------------------------------------------------------------------------------------------------------------------------
// Looping(8.1)
	// int n;
	// printf("Enter a number : ");
	// scanf("%d",&n);

	// int iter = 1;
	// for(int i=1;i<=n;i++){
	// 	for(int space=1;space<=n-iter;space++) printf(" ");
	// 	for(int j=1;j<=(i*2)-1;j++){
	// 		printf("*");
	// 	}
	// 	printf("\n");
	// 	iter ++;
	// }
// -------------------------------------------------------------------------------------------------------------------------------------------------------
// Looping(8.2)
	// int n;
	// printf("Enter a number : ");
	// scanf("%d",&n);

	// int iter = 1;
	// for(int i=1;i<=n;i++){
	// 	for(int space=1;space<=n-iter;space++) printf(" ");
	// 	for(int j=1;j<=(i*2)-1;j++){
	// 		if(j == 1 || j == (i*2)-1 || i == n) printf("*");
	// 		else printf(" ");
	// 	}
	// 	printf("\n");
	// 	iter ++;
	// }
// -------------------------------------------------------------------------------------------------------------------------------------------------------
// Looping(8.3)
	// int n;
	// printf("Enter a number : ");
	// scanf("%d",&n);

	// int iter = 1;
	// for(int i=1;i<=n;i++){
	// 	for(int space=1;space<=n-iter;space++) printf(" ");

	// 	int mid = ((i*2)-1)/2 + 1;
	// 	int digit = 1;
	// 	for(int j=1;j<=((i*2)-1);j++){
	// 		if(j<mid) printf("%d",j);
	// 		else printf("%d",(mid-(j%mid)));
	// 	}
	// 	printf("\n");
	// 	iter ++;
	// }
// -------------------------------------------------------------------------------------------------------------------------------------------------------
// Looping(8.4)
	// int n;
	// printf("Enter a number : ");
	// scanf("%d",&n);

	// for(int i=1;i<=n;i++){
	// 	for(int j=1;j<=n;j++){
	// 		printf("*");
	// 	}
	// 	printf("\n");
	// }
// -------------------------------------------------------------------------------------------------------------------------------------------------------
// Looping(8.5)
	// int n;
	// printf("Enter a number : ");
	// scanf("%d",&n);

	// for(int i=1;i<=n;i++){
	// 	for(int j=1;j<=n;j++){
	// 		if(i==1 || i==n || j==1 || j==n) printf("*");
	// 		else printf(" ");
	// 	}
	// 	printf("\n");
	// }
// -------------------------------------------------------------------------------------------------------------------------------------------------------
// Looping(8.7)
	// int n;
	// printf("Enter a number : ");
	// scanf("%d",&n);

	// int spaces = n;
	// int decrease = 0;
	// for(int i=1;i<=2*n;i++){
	// 	for(int space=1;space<=spaces;space++) printf(" ");
	// 	if(i<=n){
	// 		for(int j=1;j<=(((i-decrease)*2)-1);j++){
	// 			printf("*");
	// 		}
	// 		printf("%d\n",spaces);
	// 		spaces--;
	// 	}
	// 	else{
	// 		decrease += 2;
	// 		for(int j=1;j<=(((i-decrease)*2)-1);j++){
	// 			printf("*");
	// 		}
	// 		printf("%d\n",spaces);
	// 		spaces++;
	// 	}
	//}
// -------------------------------------------------------------------------------------------------------------------------------------------------------
// Looping(8.7) [Shorter Code]
	// int n;
	// printf("Enter a number : ");
	// scanf("%d",&n);

	// int spaces = n;
	// int decrease = 0;
	// for(int i=1;i<2*n;i++){
	// 	for(int space=1;space<spaces;space++) printf(" ");
	// 	if(i<=n){
	// 		(spaces>1) ? spaces -- : spaces ++;
	// 	}
	// 	else{
	// 		decrease += 2;
	// 		spaces++;
	// 	}
	// 	for(int j=1;j<=(((i-decrease)*2)-1);j++){
	// 		printf("*");
	// 	}
	// 	printf("\n");
	// }
// -------------------------------------------------------------------------------------------------------------------------------------------------------
// Looping(8.8)
//	int n;
//	printf("Enter a number : ");
//	scanf("%d",&n);
//
//	int spaces = n;
//	int decrease = 0;
//	for(int i=1;i<=2*n;i++){
//		for(int space=1;space<spaces;space++) printf(" ");
//		if(i<=n){
//			(spaces>1) ? spaces -- : spaces ++;
//		}
//		else{
//			decrease += 2;
//			spaces++;
//		}
//		for(int j=1;j<=(((i-decrease)*2)-1);j++){
//			if( i==1 || i==2*n || j==1 || j==(((i-decrease)*2)-1) )printf("*");
//			else printf(" ");
//		}
//		printf("\n");
//	}
// -------------------------------------------------------------------------------------------------------------------------------------------------------
// Looping(8.9)
	// int n;
	// printf("Enter a number : ");
	// scanf("%d",&n);

	// int spaces = n;
	// int decrease = 0;
	// for(int i=1;i<=2*n;i++){
	// 	for(int space=1;space<spaces;space++) printf(" ");
	// 	if(i<=n){
	// 		(spaces>1) ? spaces -- : spaces ++;
	// 	}
	// 	else{
	// 		decrease += 2;
	// 		spaces++;
	// 	}
	// 	for(int j=1;j<=(((i-decrease)*2)-1);j++){
	// 		int mid = (((i-decrease)*2)-1)/2 + 1;
	// 		if(j<=mid) printf("%d",j);
	// 		else printf("%d",(mid-(j%mid)));
	// 	}
	// 	printf("\n");
	// }
// -------------------------------------------------------------------------------------------------------------------------------------------------------
// Looping(8.10)
	// int n;
	// printf("Enter a number : ");
	// scanf("%d",&n);

	// int spaces = 1;
	// int iter = n;
	// for(int i=2*n;i>=1;i--){
	// 	for(int space=1;space<=spaces;space++) printf(" ");
	// 	for(int j=1;j<=((iter*2)-1);j++){
	// 		printf("*");
	// 	}
	// 	(i>n+1) ? iter -- : iter ++;
	// 	(i>n+1) ? spaces ++ : spaces --;
	// 	printf("\n");
	// }
// -------------------------------------------------------------------------------------------------------------------------------------------------------
// Looping(8.11)
	// int n;
	// printf("Enter a number : ");
	// scanf("%d",&n);

	// int spaces = 1;
	// int iter = n;
	// for(int i=2*n;i>1;i--){
	// 	for(int space=1;space<=spaces;space++) printf(" ");
	// 	for(int j=1;j<=((iter*2)-1);j++){
	// 		int mid = (((iter*2)-1)/2)+1;
	// 		// printf("%d",mid);
	// 		(j<=mid) ? printf("%d",j) : printf("%d",mid-(j%mid));
	// 	}
	// 	(i>n+1) ? iter -- : iter ++;
	// 	(i>n+1) ? spaces ++ : spaces --;
	// 	printf("\n");
	// }
// -------------------------------------------------------------------------------------------------------------------------------------------------------
// Looping(9)
//    for(int i=1;i<=10000;i++){
//        int current_number = i;
//        int power = 0;
//        while(current_number!=0){
//            current_number /= 10;
//            power ++;
//        }
//
//        current_number = i;
//        int sum = 0;
//
//        while(current_number!=0){
//            sum += pow(current_number%10,power);
//            current_number /= 10;
//        }
//        if(sum == i) printf("%d ", i);
//    }
// -------------------------------------------------------------------------------------------------------------------------------------------------------
// Looping(10)
//    int count = 0;
//
//    for (int i = 10000; i < 100000; i++) {
//        int number = i;
//
//        int first_digit = number / 10000;
//        int second_digit = (number / 1000) % 10;
//        int third_digit = (number / 100) % 10;
//        int forth_digit = (number / 10) % 10;
//        int fifth_digit = number % 10;
//
//        if ((first_digit % 2 == 0) && (second_digit % 2 != 0) && (third_digit == 3 || third_digit == 5 || third_digit == 7)){
//
//            int used[10] = {0};
//
//            used[first_digit] = 1;
//            used[second_digit] = 1;
//            used[third_digit] = 1;
//
//            if (used[forth_digit] == 0 && used[fifth_digit] == 0 && forth_digit != fifth_digit) {
//                count++;
//            }
//        }
//    }
//
//    printf("Total count: %d\n", count);
// -------------------------------------------------------------------------------------------------------------------------------------------------------
// Array(1)
//    int list[5] = {1,2,3,4,5};
//
//    int new_number, insert_position;
//
//    printf("Enter a new number : ");
//    scanf("%d", &new_number);
//
//    printf("Enter the position : ");
//    scanf("%d", &insert_position);
//    insert_position--;
//
//    if(insert_position <= 0) return 0;
//
//    int current_position = 5;
//    while(current_position>insert_position){
//        list[current_position] = list[current_position-1];
//        current_position--;
//    }
//    list[current_position] = new_number;
//
//    for(int i=0;i<6;i++){
//        printf("%d ", list[i]);
//    }
// -------------------------------------------------------------------------------------------------------------------------------------------------------
// Array(2)
//
//    int list[10] = {1,3,4,5,6,7,8,9,10,11};
//    int new_number;
//
//    printf("Enter a new number : ");
//    scanf("%d", &new_number);
//
//
//    int left = 0;
//    int right = 9;
//
//    int insert_position = 0;
//
//    while(left <= right){
//        int mid = left + (right - left) / 2;
//        if(new_number > list[mid]){
//            left = mid+1;
//        }
//        else if(new_number < list[mid]){
//            right = mid-1;
//        }
//        else{
//            insert_position = mid;
//            break;
//        }
//    }
//
//    printf("\nInsert position : %d", insert_position+1);
// -------------------------------------------------------------------------------------------------------------------------------------------------------



//
//
//    int a=6,b=3,c=9;
//    int gdc;
//
//    int min = a;
//    if(b<a && b<c) min = b;
//    else if(c<a && c<b) min = c;
//    else min = a;
//
//
//    for(int i=min;i>0;i--){
//        if((a%i == 0) && (b%i == 0)&& (c%i == 0)){
//            gdc = i;
//            break;
//        }
//    }
//    printf("The GDC of %d %d %d is : %d ",a,b,c,gdc);
//
//






//
//    int a,b;
//    printf("Enter the range : ");
//    scanf("%d %d",&a,&b);
//
//    if(a == 1){
//        a++;
//    }
//
//    for(int i=a;i<=b;i++){
//        int current_number = i;
//        int is_prime = 1;
//
//        if(current_number == 2){
//            printf("%d ",current_number);
//            continue;
//        }
//
//        for(int j=2;j<current_number;j++){
//            if(current_number%j == 0){
//                is_prime = 0;
//                break;
//            }
//        }
//
//        if(is_prime == 1){
//            printf("%d ", current_number);
//        }
//    }


//    int base,power;
//    printf("Enter the \"Base\" and the \"Power\"respectively: ");
//    scanf("%d %d", &base, &power);
//
//    if(base == 0) return 1;
//
//    float result = 1;
//    if(power>0){
//        for(int i=1;i<=power;i++){
//            result *= base;
//        }
//    }
//    else if(power<0){
//        for(int i=1;i<=abs(power);i++){
//            result *= base;
//        }
//        result = (float) 1/result;
//    }
//    else {
//        result = 1;
//    }
//    printf("%f ", result);



//    int year = 2025;
//    year -= 1900;
//    int leap_year_counter = 0;
//    for(int i=5;i<=year;i+=4){
//        leap_year_counter ++;
//    }
//
//    int day = (year+leap_year_counter)%7 + 1;
//
//    if(day == 1){
//        printf("Monday");
//    }
//    else if(day == 2){
//        printf("Tuesday");
//    }
//    else if(day == 3){
//        printf("Wednesday");
//    }
//    else if(day == 4){
//        printf("Thursday");
//    }
//    else if(day == 5){
//        printf("Friday");
//    }
//    else if(day == 6){
//        printf("Saturday");
//    }
//    else{
//        printf("Sunday");
//    }

//
//    int n = 10;
//    for (int i = 0; i < n; i++) {
//        printf("%d ", fib(i));
//    }










return 0;
}





