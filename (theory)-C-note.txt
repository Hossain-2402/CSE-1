                                Lec-2
                                -----

#include<stdio.h>
int  main(void){
	printf("welcome");
	retunr 0;
}



---------------------------------------------------------------------------------------------------------
#include 			= 	directive																		|
---------------------------------------------------------------------------------------------------------
stdio.h 			= 	input-output header file 														|
---------------------------------------------------------------------------------------------------------
'int' main() 		= 	this is the return type															|
---------------------------------------------------------------------------------------------------------
int 'main'() 		= 	funciton name 																	|
---------------------------------------------------------------------------------------------------------
int main('void')	= 	parameter																		|
---------------------------------------------------------------------------------------------------------
printf				= 	built in 'library function' ( linkers connect this to the header file )			|
---------------------------------------------------------------------------------------------------------
retrun 0  			= 	return of the function															|
---------------------------------------------------------------------------------------------------------
if end is ';' 		= 	this ';' at end means that the line is a statement (#include is not a statement)|
---------------------------------------------------------------------------------------------------------



# C was invented in 1972 By Dennis ritchi

# C is a 'case sensetive' programmeing language (uppercase, lowercase)

# Languages are of 3 types:
	1. High lvl lang : 
			COBOL,FORTRAN,Basic
			made for specific work
			used in business(COBOL) and math(FORTRAN)

	2.Mid lvl lang :
			C,C++,JAVA

	3.Low lvl lang : 
			Assemble
			requires LARGE code for short work

# The compiler converts the code to 0's and 1's

# The compiler finds the MAIN function and runs that first

# Function is a set of statements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-3
                                    -----

# variable = memory address/location/container
# int x;
    int = data type
    x = variable name
# Alpha-numeric = Alphabate and numbers
# "-" is not allowed in variable name
# variable name cannot start with a number

#if we give  as input 
	the computer writes : 00000000 00000101

# integer stores a 16 bit data.

#include<stdio.h>
int main(){
	int a=15;b=15;
	int sum;
	sum = a+b;



}


# "%d" is a formate specifier .

# Datatype:
	# character (char) Memory Size : 1B | Format spe: %c
	# integer (int) Memory Size : 2B/4B/8B | Format spe: %d
	# floatint point number (float) Memory Size : 4B | Format Spec: %f
	# double precision floating point number (double) : 8B | Format Spec: %lf
	# void

Variable:
	# Local - variable declared inside a function are called L_Var
	# global - variable declared outside a function are called G_Var


# &x -> the location of the x variable;

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-4
                                    -----

# Arithmetic operator:
    +,-,*,/,%
# modulus always works on intger value. Because it always returns an integer 
# Unary operator: "-" Example: a = 5; -a = -5; It is possible to be used in one variable or one operand
# a = a+b; can be writen as a += b
# User defined Function:
  Structure:
    (return type) (function name) (parameter) {
        logic;
        return ;
    }
  Example:
    int add(int a,int b){
        return a+b;
    }
# The parameter variables function as local variable inside the declared function
# add(5,2) : here 5 and 2 are arguments of the function
# if we put the user made function under the main function, we need to do protoyping .
    prototyping :
      #include<stdio.h>
      int add(int a,int b);

      int main(){
          ......
      }



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-5
                                    -----


# if (conditional expression/condition) {
    statement;  
  }

# Even or Odd :
    int main(){
    
    	int a;
    	scanf("%d",&a);
    	if(a%2 == 0){
    		printf("This number is an even number\n");
    	}
    	else{
    		printf("This number is an odd number \n");
    	}
    	return 0 ;
    }

# a%2 == 1 : this is an "odd" number


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-6
                                    -----
# If there are multiple (more thatn 2) conditions to check , we use if,else if,else 
# if we use else if , then it is not mandatory to add else{} . But the convention is that we add the else{} at the end.
# >,<,==,>=,<=,!= : these are called relational operator
# &&, ||, ! : these are logical operator
# if(a){...} this is similar to if(a!=0){...}


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-7
                                    -----


# (y%400 == 0 for 1800,1900,2000) || (y%4 == 0 && y%100 != 0 for the remaining years)
# 
# Largest among a,b,c [using nasted if]
	
	#include<stdio.h>
	int main(){
			
		int a=10,b=8,c=12;
		int max;
		if(a>b){
			if(a>c){
				max = a;
			}
			else{
				max = c;
			}
		}
		else if(b>c){
			max = b;
		}
		else{
			max = c;
		}
		
		printf("%d",max);
	
		return 0;
		
	}
	
	
	
	
	
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-8
                                    -----

# switch-case:
        switch(expression){
             case constant 1:
                   .....
                   break;
              case constant 2:
                   .....
                   break;
              default:
            ......
         }

    Example:
    --------
       char grade;
       scanf(" %c",&grade);
       switch(grade){
             case 'A':
                   .....
                   break;
              case 'B':
                   .....
                   break;
              default:
                   ......
         }
# This thing prints 'Got it' if input is between 1-3: 
       switch(number){
             case 1:
                   .....
              case 2:
                   .....
              case 3:
                  printf("Got it");
                  break;
              default:
                   ......
         }

# for loop:
       for (initialization;condition;iteration){
             .....
       }

       Example:
       --------
       for(int i=1;i<=10;i++){
           printf("%d",&i);
        }



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-9
                                    -----


for(int i=0;i<=5;i++){
	for(int j=0;j<=3;j++){
		printf("%d",j);
	}
	printf("\n");
}
# There are 2 loops above, outer for-loop, inner for-loop
	# This prints:
		123
		123
		123
		123
		123

# Prime number from 2-10:
	for(int i=2;i<=10;i++){
		int is_prime = 1;
		for(int j=2;j<i;j++){
			if(i%j == 0){
				is_prime = 0;
				break;
			}
		}
		(is_prime == 1)? printf("%d ",i) : printf("");
	}


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-10
                                    -----

# while(condition){
	.....
 }
 Application: 
	 int i=0;
	 while(i<10){
		printf("%d\n",i);
		i++;
	 }

# Guessing game : 
	  int n,flag = 0;
	  printf("Enter 5+7:");
	  while(flag == 0){
		scanf("%d",&n);
		if(n==12) flag = 1;
		else printf("Try again :");
	  }
	  printf("Success");

# Infinite loop :
	while(1){
		printf("infinitel lopp");
	}
	for( ; ; ){
		printf("infinite loop");
	}

# guessing game without break:
	int n,flag = 0,try = 3;
	printf("Enter 5+7= ");
	while(flag == 0 && try>0){
		scanf("%d",&n);
		if(n == 12) flag = 1;
		else{
			printf("Try again: ");
			try --;
		}
	}
	

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-11
                                    ------
# Getting the digit from an integer:
	int number = 123;
	int last_digit = number%10 // this is the last digit [i.e 3]
	int first_two_digits = number/10 // this is the first 2 digit number [i.e 12]

	code :
	-----	
	int number = 123;
	int sum = 0;
	while(number != 0){
		int remainder = number%10;
		sum += remainder;
		number /= 10;
	}
	printf("The summation is : %d",sum);

# do-while :
	do{
		...
	}while(condition);
	Application :
	-----------
	int number = 1;
	do{
		number += 1;
	}while(number<5);

# do-while runs atleast ones even if the condition is not true. But other loops might not run if the condition is not true.
# while(...); inside the '()' we cannot initialize a new variable. Because here we write a condition.

# guessing game :
	printf("Enter 5+7 : ");
	do{
		int n;
		scanf("%d", &n);
		if(n == 12) break;
		else printf("Wrong answer. Enter again : ");
	}while(1);
	printf("Great");

# differe between i++ and ++i;
	int i = 10;
	int a = i++;
	// Now i = 11 and a = 10

	int i = 10;
	int a = ++i;
	// Now i = 11 and a = 11


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-15
                                    ------

# Array
    Definition: An array is a collection of elements of the same data type stored in a contigious memory location.
	int mark; // normal variable
	int marks[5]; // collection of 5 normal variables
	"int" = data type
	"mark" = array name
	"5" = number of items

	memory address : 0x1100,0x1103,0x1106,0x1109,0x11C - serial wise allocation
	
	marks[0] -- 1000-1003 bytes
	marks[1] -- 1004-1007 bytes
	marks[2] -- 1008-1011 bytes
	marks[3] -- 1012-1015 bytes
	marks[4] -- 1016-1019 bytes

# General syntax :
	data_type array_name[size];
# Application :
	int marks[5];
# Indexing :
	the 1st element of the array is in the 0th index. 

	element		index
	  1st		  0
	  2nd		  1
	  3rd		  2
	  4th		  3
	  5th		  4

# Value initialization : 
	# 1 : int marks[5] = {1,2,3,4,5};
	# 2 : 
		int marks[5];
		marks[0] = 1;  // 1st mark
		marks[1] = 2;  // 2nd mark
		marks[2] = 3;  // 3rd mark
		marks[3] = 4;  // 4th mark
		marks[4] = 5;  // 5th mark
	# 3 :
		int marks[5] = {}; // mark = {0,0,0,0,0}
	# 4 :
		int marks[] = {1,2,3}; // make an array of size 3
		
		


# Printing individual array value : 
	int marks[5] = {1,2,3,4,5};
	printf("%d", mark[1]); // prints 2. This is the 2nd item of the array
	printf("%d, %d", mark[0],mark[1]); // prints 1, 2. 

# Printing all the values of array:
	int marks[5] = {1,2,3,4,5};

	for(int i=0;i<5;i++){
		printf("%d", mark[i]);
	}

# Summation of all the values : 
	int marks[5] = {1,2,3,4,5};
	int sum = 0;
	for(int i=0;i<5;i++){
		sum += marks[i];
	}

	printf("%d",sum);

# XOR operator : ^


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-16
                                    ------

# Finding the maximum value of an array:
	int arr[5] = {5,4,3,2,1};
	int max = arr[0];
	for(int i=0;i<5;i++){
		if(arr[i]>max){
			max = arr[i];
		}
	}
	printf("%d",max);

# Getting values from user as input : 
	int arr[5];
	printf("Enter the array values : ");
	for(int i=0;i<5;i++){
		scanf(%d".&arr[i]);
	}

# Sorting (Bubble sort) :
	int arr[5] = {5,4,3,2,1};
	for(int i=0;i<5;i++){
		for(int j=0;j<4-i;j++){
			if(arr[j]>arr[j+1]){
				int temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
	}

# Simulation of the Buble sort :
	i = 0;
		j = 0; 5,4,3,2,1 -> 4,5,3,2,1
		j = 1; 4,5,3,2,1 -> 4,3,5,2,1
		j = 2; 4,3,5,2,1 -> 4,3,2,5,1
		j = 3; 4,3,2,5,1 -> 4,3,2,1,5
	
	i = 1;
		j = 0; 4,3,2,1,5 -> 3,4,2,1,5
		j = 1; 3,4,2,1,5 -> 3,2,4,1,5
		j = 2; 3,2,4,1,5 -> 3,2,1,4,5
	i = 2;
		j = 0; 3,2,1,4,5 -> 2,3,1,4,5
		j = 1; 2,3,1,4,5 -> 2,1,3,4,5
	i = 3;
		j = 0; 2,1,3,4,5 -> 1,2,3,4,5



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-17
                                    ------


# 2D array:
    int marks[3][5];
              ^  ^
              |  |
             row colum

# indexing : 
    0 1 2 3 4
    - - - - -
 0 | | | | | |
    - - - - -
 1 | | |5| | |
    - - - - -
 2 | | | | | |

 the element '5' is in (1,2) index
 
# Initialization :
    int marks[3][5] = {
        {1,2,3,4,5},
        {6,7,8,9,10},
        {11,12,12,14,15}
    };

# Traverse :
    int marks[3][5] = {
        {1,2,3,4,5},
        {6,7,8,9,10},
        {11,12,12,14,15}
    };

    for(int row=0;row<3;row++){
        for(int col=0;col<5;col++){
            printf("%d ",marks[row][col]);
        }
        printf("\n");
    }

# sum of each row :
    int marks[3][5] = {
        {1,2,3,4,5},
        {6,7,8,9,10},
        {11,12,13,14,15}
    };

    for(int row=0;row<3;row++){
        int sum = 0;
        for(int col=0;col<5;col++){
            sum += marks[row][col];
        }
        printf("%d\n",sum);
    }

# Maximum value of one colum :

    int marks[3][5] = {
        {1,2,3,4,5},
        {6,7,8,9,10},
        {11,12,13,14,15}
    };

    int col = 0;
    while(col<5){
        int max = marks[0][col];
        for(int row=0;row<3;row++){
            if(marks[row][col] > max){
                max = marks[row][col];
            }
        }
        printf("%d ",max);
        col++;
    }

# transpose of an array :

    int marks[3][5] = {
        {1,2,3,4,5},
        {6,7,8,9,10},
        {11,12,13,14,15}
    };

    int t[5][3];
    for(int row=0;row<3;row++){
        for(int col=0;col<5;col++){
            t[col][row] = marks[row][col];
        }
        printf("\n");
    }


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-18
                                    ------


# 3D array :
    int arr[3][4][2];
            ^  ^  ^
          row col Z

    Looks like a rubics cube 

# The upper index is the '0'th index And The 2nd layer is the '1'th index

# if we take the elements 
        arr[0][0][0]
        arr[0][0][1]
    we will get a 1D array of size 2;

# Inserting value in an array : 
    arr[2][3][4] = {
        {
            {1,2,3,4},
            {5,6,7,8},
            {9,10,11,12}
        },
        {
            {1,2,3,4},
            {1,2,3,4},
            {1,2,3,4}
        }
    };


    ------- 
   |1 |5 |9|
    ---------
   |13|17 |21|
    ---------

        -------- 
       |2 |6 |10|
        -------- 
       |14|18|22|
        --------

            -------- 
           | 3| 7|11|
            --------
           |15|19|23|
            --------
            
                ------- 
               |4| 8|12|
                -------- 
               |16|20|24|
                --------

# printing The array :

    int arr[2][3][4] = {
        {
            {1,2,3,4},
            {5,6,7,8},
            {9,10,11,12}
        },
        {
            {1,2,3,4},
            {1,2,3,4},
            {1,2,3,4}
        }
    };


    for(int i=0;i<2;i++){
        for(int j=0;j<3;j++){
            for(int k=0;k<4;k++){
                printf("%d",arr[i][j][k]);
            }
            printf("\n");
        }
        printf("\n");
    }





~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-19
                                    ------



# String :
        A set of characters terminated by a NULL
        NULL character = '\O'

# Initialization :
    char str[20] = {'H','I'}; // This is an array of a character. [Not String]
    char str[20] = {'H','I','\0'}; // This is a "string"

    char str[20] = "HI"; // Another way declare a string 

# Memory :
    ------
   |H|I|\0|
    ------

# printing the string :

    char str[20] = {'H','I','\0'}; 

    int i=0;
    while(str[i] != '\0'){
        printf("%c",str[i]);
        i++;
    }

# printing the string :

    char str[20] = {'H','I','\0'}; 
    printf("%s",str);


# getting the string as an input :

    char str[20];

    scanf("%s",str); // We don't put '&' sign here.

# scanf function does not handle space or " " .
# Hence we use gets(str);

# Getting string with space in it :
    char str[20];
    gets(str);
    printf("%s",str);

    or we can use,

    fgets(str,sizeof(str),stdin); // This restricts the size of the string --------------------------------------------- This method is HIGHLY RECOMMENDED for string input
    printf("%s",str);

# getchar() is a library function

# getche() is not a library function
    to use it, we need to write:" #include<conio.h>" on top


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-20
                                    ------




#  Printing a string : 
    char str[] = "Welcome";

    printf(str);
    puts(str); // another way to  print a string

# Getting the length of the string :
    char str[] = "Welcome";

    int i=0;
    while(str[i] != '\0'){
        i ++;
    }
    printf("Length : %d", i);

# Getting the length of the string :
    char str[] = "welcome";

    int length = strlen(str);  // requires "#include<string.h>" on top

    printf("Length L : %d",length);

# Copy a string :
    char str[20] = "welcome";
    char dest[20];

    strcpy(dest,str); // requires "#include<string.h>" on top

    // then dest becoms "welcome".
    // similar to dest = str

    printf(dest); // prints : welcome

# Mergin to strings :
    char s1[20] = "Welcome";
    char s2[20] = " here";

    strcat(s1,s2); // requires "#include<string.h>" on top

    // Then, s1 becomes "Welcome here"
    // s2 remains " here"

# Do the above thing without using library function 

# Comparing 2 strings :

    char s1[20] = "Name";
    char s2[20] = "name";

    int result = strcmp(s1,s2); // requires "#include<string.h>" on top

    if(result == 0){
        printf("Same");
    }else{
        printf("Not same");
    }

    printf("\n %d",result); // see the value of result to understand the logics given below

    //Conditiongs : 
        // 1. return 0 : if s1 == s2
        // 2. return < 0 : if s1<s2 (dictionary order)
        // 3 return > 0 : if s1>s2 (dictionary order)

# Storing multiple strings : 

    char animals[5][20] = {
        "Cow",
        "dog",
        "cat",
        "tier",
        "lion"
    };

    char test[20] = "cat";

    int flag = 1;

    // The loop below goes throught each element of animals array

    for(int i=0;i<5;i++){
        int result = strcmp(animals[i],test); // compares each item with the test variable
        if(result == 0){
            flag = 0; // flag = 0 means the animal is found
            break;
        }
    }

    if(flag == 0){
        printf("%s exists",test);
    }
    else{
        printf("%s does not exist",test);
    }



# Storing multiple strings (change the for loop condition): 

    char animals[5][20] = {
        "Cow",
        "dog",
        "cat",
        "tier",
        "lion",
        " "
    };

    char test[20] = "cat";

    int flag = 1;

    // The loop below goes throught each element of animals array

    for(int i=0;i<animals[i] != '\0';i++){
        int result = strcmp(animals[i],test); // compares each item with the test variable
        if(result == 0){
            flag = 0; // flag = 0 means the animal is found
            break;
        }
    }

    if(flag == 0){
        printf("%s exists",test);
    }
    else{
        printf("%s does not exist",test);
    }








~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-21
                                    ------




# Benifits of using function :

	1.code re-useablity
	2.break down of a programme into a smaller parts
	3.reduces repetation of code
	4.readablity


# Function types :

	1.Standard library funciton
	2.User defined function 

# atoi function:
	//converts string to an integer

	   int val;
	   char *str; 
	   str = "1509.10E";
	   val = atoi(str); 
	   printf("integral number = %d", val); // This code prints : 1509


	   ------  ------
	 | output | 1509 |
	   ------  ------


# Structure of a funcition : 
	   int add(int add,int b); //  Function decraration

	   int mian(){
		   	int a = 5, b = 10;
		   	int result = add(a,b); // Function call
		   	printf("%d", result);

		   	return 0;
	   }


	   // Funciton definition
	   int add(int a,int b){
	   		return a+b;
	   }

# try to run it :
	   int add(int a, int b){
	   		printf("Nothing");
	   }

	   int main(){
	   	int result = add(5,10);
	   	printf("%d",result);
	   }

	   ------  ------
	 | output |   1  |  
	   ------  ------

# Funciton Call by value:
	   void modify(int x){
	   		x += 10;
	   		printf("inside the funciton x = %d\n", x);
	   }

	   int main(){
	   		int x = 10;
	   		modify(x);
	   		printf("outside the funciton x = %d\n", x);	 // Output : 10 (unchanged)
	   }



# Funciton Call by reference:

	   void modify(int *x){
	   		*x += 10;
	   		printf("inside the funciton x = %d\n", *x);
	   }

	   int main(){
	   		int x = 10;
	   		modify(&x);
	   		printf("outside the funciton x = %d\n", x);	 // Output : 20 (changed)
	   }

# Recursive function (Alternating to loop):

	   void fn();

	   int main(){
	   		fn();
	   }

	   void fn(){
	   		fn();
	   }

	   // Here the function "fn" 

	   
# Unique way of getting Function parameters : (This thing was inclomplete in the class)

	   int sum(int a,...);

	   int main(){
	   		int result = sum(5,10);
	   		return 0;
	   }

	   int sum(int a,int b, int c){
	   		return a+b;
	   }







~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-22
                                    ------







# Recursive function :
    # Definition : A recursive function is a function that calls itself to solve a problem

    int f(){
        printf("Welcome to the function");
        f();

        return 0;
    }

    int main(){
        f(); // The function "f()" is a recursive function 
    }

    // We use a base case condition to stop a recursive function 

# Standard recursive fuction: 
    # Syntax :
        return_type function_name(parameter){
            if(base_condition){
                return base value;
            }
            return function_name(argument);
        }

# Factorial using recursive function : 
        int fact(int n){
            if(n == 0){
                return 1;
            }
            return n*fact(n-1);
        }

        int main(){
            int n = 5;
            int result = fact(n);
            printf("%d",result);
        }

# Simulation : 

    5! = 5x4x3x2x1 = 5x(4!)
    4! = 4x3x2x1   = 4x(3!)
    3! = 3x2x1     = 3x(2!)
    2! = 2x1       = 2x(1!)
    1! = 1         = 1x(0!)
    0! = 1         = 1 


    fact(5):
    5 * fact(4)

        fact(4):
        4 * fact(3)

            fact(3):
            3 * fact(2)

                fact(2):
                2 * fact(1)

                    fact(1):
                    1 * fact(0)

                        fact(0):
                        return 1

    > Now read the text below "from bottom to top":

        fact(5): // function returns 120
        5 * fact(4) // [5 * 24 = 120]

            fact(4): // function returns 24
            4 * fact(3) // [4 * 6 = 24]

                fact(3): // function returns 6
                3 * fact(2) // [3 * 2 = 6]

                    fact(2): // function returns 2
                    2 * fact(1) // [2 * 1 = 2]

                        fact(1): // function returns 1
                        1 * fact(0) // [1 * 1 = 1]

                            fact(0): // function returns 1
                            return 1 




# Code for nth fibonacci number:

    int fib(int n){
        if(n == 0){
            return 0;
        }
        if(n == 1){
            return 1;
        }
        return fib(n-1) + fib(n-2);
    }

    int main(){
        int result = fib(5); 
        printf("%d",result);
    }





~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-23
                                    ------


# Structure :
    A structure in C is a user-defined data-type that allows combining multiple variable of different data types in a singal namespace


# Syntax :
    struct structure_name{
        data_type member1;
        data_type member2;
        ............

    };


# Example :
    struct Student{
        char name[20];
        int roll;
        float cgpa;
    };

    // Convention is to keep the first letter of the struct_name capitalized

    int main(){
        struct Student s1;

        scanf("%s",s1.name);
        scanf("%d",&s1.roll);
        scanf("%f",&s1.cgpa);


    }


# Another way :
    struct Student{
        char name[20];
        int roll;
        float cgpa;
    }s1; // s1 is a global variable

    // Convention is to keep the first letter of the struct_name capitalized

    int main(){

        scanf("%s",s1.name);
        scanf("%d",&s1.roll);
        scanf("%f",&s1.cgpa);

    }

# Assigning :
    struct Student{
        char name[20];
        int roll;
        float cgpa;
    }s1; // s1 is a global variable


    int main(){
        s1.name[] = "Hossain";
    }

# Another way of making a structure : 
    typedef struct{
        char name[20];
        int roll;
        int cgpa;
    } Student; // Alias for struct student

    int main(){
        Student s1; // No need to write struct

        scanf("%s",s1.name);
        scanf("%d",&s1.roll);
        scanf("%f",&s1.cgpa);

    }


# Student type of "array" :
    int main(){
        Student s[5]; // student type of array

        s[0].roll = 15;

        for(int i=0;i<5;i++){
            scanf("%s", s[i].name);
            scanf("%d", &s[i].roll);
            scanf("%f", &s[i].cgpa);
        }
    }


# Assignment :
    Employee :
        > name
        > id
        > salary 
        > date of birth 


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-24
                                    ------



# Structure with pointer :
    
# Pointer (Definition) :
    A pointer is a variable that holds memory address of another variable

# Pointer :

    int x = 5;
    // initializing a variable called x allocates some space in the memory
    // it holds a "value"


    int *p = &x;
    // initializing a pointer variable called p allocates some space in the memory
    // but is stores "location" of another variable

    // here &x is the memory location of the variable x 

# Getting input using pointer : 

    int x;
    int *p = &x;

    scanf("%d",p);
    printf("%d",x);

    -------- ------
   | input |   5   |
    -------- ------
   | output|   5   |
    -------- ------



# "Method" in structure :

    struct Student{
        char name[20];
        int roll;
        float cgpa;
    };

    void display(struct Student *s){
        printf("%s",s->name); // Since s is a pointer variable, to access any of its members, we use '->' instead of '.'
        printf("%d",s->roll);
        printf("%f",s->cgpa);
    }


    int main(){
        struct Student std = {"Mark",101,3.95};

        display(&std); // Since we sent the address as in argument of the function, this is called 'pass by reference' 

        return 0;

    }



# Pass by reference : 

    struct Student{
        char name[20];
        int roll;
        float cgpa;
    };

    void display(struct Student *s){
        s->roll = 202;
        printf("%d",s->roll); // This prints : 202
    }


    int main(){
        struct Student std = {"Mark",101,3.95};

        display(&std);
        printf("%d",std.roll); // This prints : 202
        return 0;

    }


# Difference between 'pass by value' & 'pass by reference' :

    void change_1(int x){
        x += 20;
    }

    void change_2(int *x){
        *x += 20;
    }

    int main(){
        int x = 10;
        change_1(x);
        printf("%d",x); // Prints : 10 [because it is 'passed by value']

        change_2(&x);
        printf("%d",x); // Prints : 30 [because it is 'passed by reference']

    }


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-25
                                    ------


# Pointer :

# Definition :
    A pointer is a variable that holds memory address of another variable

# Example :
        int a = 10;
        int *p = &a;
        // '&' is a reference operator

# if we want to store the memory of 'a' the p pointer has to be int type variable as well : 
        int a = 10;
        int *p = &a;

        char c = 'a';
        char *p = &c;

        float f = 2.5;
        float *p = &f;


# Reference and De-reference operator :
          (reference operator)  & -> gives the memory address
        (De-reference operator) * -> gives the value from the memory address

# Printing *p and p : 
        int c = 10;
        int *p = &c;

        printf("%p",p);  // Prints : FE00         [address]
        printf("%d",*p);  // Prints : 10  [The value in that address]


# Pass reference : 
        void changeValue(int *p){
            *p = 20;
        }

        int main(){
            int a = 10;
            changeValue(&a);
            printf("%d",a);

            -------  -------
           | output |   20  |
            -------  -------

            return 0;

        }


#
        int main(){
            int arr[5] = {1,2,3,4,5};
            int *ptr = arr; // No need to use the & sign

            FE00 1 
            FE04 2
            FE08 3
            FE12 4
            FE16 5

            printf("%p",p); 
            printf("%d",*p); 
            printf("%d",p[0]); // This prints : 1 
            printf("%d",p[1]); // This prints : 2 



        }


#

    int main(){


            FE00 1 
            FE04 2
            FE08 3
            FE12 4
            FE16 5

            
        int arr[5] = {1,2,3,4,5};

        int ptr = arr;

        ptr ++;
        printf("%p", ptr);  // Tis prints : FE04
        printf("%p", *ptr); // Tis prints : 2
    }


# Why ptr++ is possible but arr++ is not :
    ptr is a variable that holds address . A variable can be ++'ed
    but arr is just an address (it is a constant) that is not stored in a variable. An constant value cannot be ++'ed


# Passing an array to a function: 

    int fn(int x, int arr[]){
        arr[2] = x;
    }

    or,

    void fn(int x, int *ptr){
        ptr[2] = x;
    }

    int main(){
        int a = 20;
        int arr[5] = {1,2,3,4,5};

        fn(a,arr);

        for(int i=0;i<5;i++){
            printf("%d",arr[i]);
        }
    }


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    Lec-25
                                    ------

# Passing an array to a function :
    double getsum(int arr[],int size){
        double s = 0;
        for(int i=0;i<size;i++){
            s += arr[i];
        }
        return s;
    }
    int main(){
        int balance[5] = {1,2,3,4,5};
        double sum = getSum(balance,5);
        printf("Total balance: %lf", sum);


    }


# Null pointer :
    > Assigns a NULL value
    > It points to nothing

    int *ptr = NULL;
    printf("%d",ptr); // prints : 0


# Double pointer :
    int x = 10;
    int *a = &x;
    int **ptr = &a;

    printf("%p",ptr); // prints : &
    printf("%p",*ptr); // prints : &x
    printf("%d",**ptr); // prints : 10

    > Simulation:
        x --- 10
        a --- &x
        ptr --- &a


# Function pointer:
    void greet(){
        printf("Hello world");

    }

    int main(){
        void (*funcPtr)() = &greet;
        funcPtr(); // same as writing : greet()
    }








