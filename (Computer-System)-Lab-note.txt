# A computer can convert 'data' into 'information' that is useful to people 
# Computer parts:
    Hardware 
    Software
    Data
    User

# Softawares are also called programmes
# The computer reads all the datas as numbers (0's and 1's)
# Four 0's and 1's can make 2^4 = 16 combinations or different numbers
# The RAM falls under the category of "memory"
# Hard disk drive or ssd fall under the category of "Storage"
# Computers main circuit board is the motherboard
# SSD > HDD
                    HDD                      SSD
    ----------------------------------------------
    Access time      10                      .1 
    ----------------------------------------------
    Read speed      50-100                 200-500
    ----------------------------------------------
    power consum.    6                       2-3
    ----------------------------------------------

# The disk revolves
# the Actuator arm gets into contact with the moving disk and read the data
# RAM stores the data temporarily (volatile). The datas disappear when the computer is turned off. 
# ROM is not volatile. Rom contains the operation system (OS) [3-1 has a OS course]. When a computer is turned on, the rom runs a small part of OS that it contains.
# Bit is the smallest unit of data that is stored. 

# Byte - bit
    1 BYTE = 8 Bits
     1KB = 1024 BYTE
# ALU = Airthmetical and Logic unit 
# input -> memory-> ALU (Arithmetic Logic Unit) -> memory
Softwares:
    # system soft. (OS) . A small part is stored in ROM. when the pc is turned on this gathers all the remaining OS.
    # Application soft. (All besic soft.)
    # Malware soft. 

------------------------------------------------------------------------------------------------------------------------------------------




Attandance   |  20%
-------------------
Online       | 20%
-------------------
offline      |  10%
-------------------
presentation | 10%
-------------------
mid          | 20%
-------------------
Lab final    | 20%

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                                                                                            LAB-2 
# Number system


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                                                                                            LAB-3

Microsoft word

HW : merge cells, split cells






#include <bits/stdc++.h>
using namespace std;
int main() {
    vector<int> numbers = {-4,-2,1,6,12};
    // vector<int> numbers = {1,2,4,8,10};
    
    unordered_set<int> visited;

    vector<int> result;
    int all_positive = 1, all_negative = 1;
    
    for(int i=0;i<numbers.size();i++){
        if(numbers[i] < 0){
            all_positive = 0;
            break;
        }
    }

    for(int i=0;i<numbers.size();i++){
        if(numbers[i] > 0){
            all_negative = 0;
            break;
        }
    }
    
    if(all_positive == 1){
        for(int i=0;i<numbers.size();i++){
            result.push_back(numbers[i]*numbers[i]);
        }
    }
    else if(all_negative == 1){
        for(int i=numbers.size()-1;i>=0;i--){      
            result.push_back(numbers[i]*numbers[i]);
        }     
    }
    else{
        int right;
        for(int i=0;i<numbers.size();i++){
            if(numbers[i]>0){
                right = i;
                break;
            }
        }
        int left = ((right)>0)? right-1 : right;
        while(left>0 || right<numbers.size()-1){
            int right_sqr_num = numbers[right]*numbers[right];
            int left_sqr_num = numbers[left]*numbers[left];
            if(left_sqr_num <= right_sqr_num){
                if(visited.find(numbers[left]) == visited.end()){
                    result.push_back(left_sqr_num);
                    visited.insert(numbers[left]);
                    left = (left>0) ? left-- : left;
                }
                else{
                    right = (right<numbers.size()-1) ? right ++ : right;
                }
            }
            else{
                if(visited.find(numbers[right]) == visited.end()){
                    result.push_back(right_sqr_num);
                    visited.insert(numbers[right]);
                    right = (right<numbers.size()-1) ? right++ : right;
                }
                else{
                    left = (left>0) ? left -- : left;
                }
            }
        }
    }
    
    for(int i=0;i<result.size();i++){
        cout << " " << result[i];
    }
    
    
    
}


















